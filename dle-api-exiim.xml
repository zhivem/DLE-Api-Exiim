<?xml version="1.0" encoding="utf-8"?>
<dleplugin>
	<name>DLE Api Exiim</name>
	<description></description>
	<icon>engine/skins/images/dle_exiim.png</icon>
	<version>1.1</version>
	<dleversion>19</dleversion>
	<versioncompare>greater</versioncompare>
	<upgradeurl></upgradeurl>
	<filedelete>1</filedelete>
	<needplugin></needplugin>
	<mnotice>1</mnotice>
	<mysqlinstall><![CDATA[-- Регистрация модуля в админпанели
INSERT INTO `dle_admin_sections` (`name`, `title`, `descr`, `icon`, `allow_groups`) 
VALUES ('admin_interface', 'DLE Api Exiim', 'Модуль для автообновления контента в DataLife Engine', 'engine/skins/images/dle_exiim.png', '1');]]></mysqlinstall>
	<mysqlupgrade><![CDATA[]]></mysqlupgrade>
	<mysqlenable><![CDATA[]]></mysqlenable>
	<mysqldisable><![CDATA[]]></mysqldisable>
	<mysqldelete><![CDATA[-- Удаление записи модуля из админпанели
DELETE FROM `dle_admin_sections` 
WHERE `name` = 'admin_interface';]]></mysqldelete>
	<phpinstall><![CDATA[]]></phpinstall>
	<phpupgrade><![CDATA[]]></phpupgrade>
	<phpenable><![CDATA[]]></phpenable>
	<phpdisable><![CDATA[]]></phpdisable>
	<phpdelete><![CDATA[]]></phpdelete>
	<notice><![CDATA[GitHub: https://github.com/zhivem/DLE-Api-Exiim
Автор: Zhivem]]></notice>
	<file name="engine/inc/admin_interface.php">
		<operation action="create">
			<replacecode><![CDATA[<?php
if (!defined('DATALIFEENGINE')) die("Hacking attempt!");

// Проверка прав администратора
function checkAdminAccess($user_group, $member_id, $lang) {
    if (!$user_group[$member_id['user_group']]['admin_addnews']) {
        die('{"success":false,"message":"' . $lang['index_denied'] . '"}');
    }
}

// Создание выпадающего списка
function makeDropDown($options, $name, $selected = '', $multiple = false, array $attributes = []) {
    $attrs = array_merge(['class' => 'custom-select' . ($multiple ? ' select2-multi' : '')], $attributes);
    $attrs_str = array_reduce(array_keys($attrs), fn($carry, $key) => $carry . " $key=\"" . htmlspecialchars($attrs[$key]) . "\"", '');
    $dropdown = '<select name="' . htmlspecialchars($name) . ($multiple ? '[]' : '') . '" ' . ($multiple ? 'multiple="multiple"' : '') . ' ' . $attrs_str . '>';
    foreach ($options as $value => $text) {
        $selectedAttr = is_array($selected) ? (in_array($value, $selected) ? ' selected' : '') : ($value == $selected ? ' selected' : '');
        $dropdown .= '<option value="' . htmlspecialchars($value) . '"' . $selectedAttr . '>' . htmlspecialchars($text) . '</option>';
    }
    return $dropdown . '</select>';
}

// Создание чекбокса
function makeCheckbox($name, $label, $checked, $tooltip = '') {
    return '<label class="custom-checkbox"><input type="checkbox" name="' . $name . '" value="1"' . ($checked ? ' checked' : '') . '><span class="checkmark"></span> ' . $label . ($tooltip ? '<span class="tooltip-icon" data-tooltip="' . htmlspecialchars($tooltip) . '">?</span>' : '') . '</label>';
}

// Основные параметры модуля
$mod = "admin_interface";
$__name = "DLE Api Exiim updater";
$__descr = "Модуль для автообновления контента в DataLife Engine 19+";

// Кэширование конфигурации
static $config_mod = null;
if ($config_mod === null) {
    $config_mod = file_exists(ENGINE_DIR . "/data/{$mod}.config") 
        ? unserialize(file_get_contents(ENGINE_DIR . "/data/{$mod}.config")) 
        : [];
}

// Подключение API
require_once DLEPlugins::Check(ENGINE_DIR . '/modules/api_client.php');

// Получение дополнительных полей (xfields) в формате JSON
$xfields = ['' => 'Не выбрано'];
if (file_exists(ENGINE_DIR . '/data/xfields.json')) {
    $xfields_data = json_decode(file_get_contents(ENGINE_DIR . '/data/xfields.json'), true);
    if (json_last_error() === JSON_ERROR_NONE && isset($xfields_data['fields']) && is_array($xfields_data['fields'])) {
        foreach ($xfields_data['fields'] as $field_name => $field_data) {
            if (!empty($field_name) && !empty($field_data['description'])) {
                $xfields[$field_name] = $field_data['description'];
            }
        }
    } else {
        msg("error", "Ошибка модуля", "Не удалось разобрать xfields.json. Проверьте формат файла.");
    }
}

// Поля API для сопоставления
$api_fields = [
    '' => 'Не выбрано', 
    'id' => 'ID', 
    'iframe_url' => 'Iframe URL', 
    'kinopoisk_rate' => 'Кинопоиск Оценка',
    'kinopoisk_votes' => 'Кинопоиск Голоса',
    'imdb_rate' => 'IMDb Оценка',
    'imdb_votes' => 'IMDb Голоса',
    'imdb_id' => 'IMDb ID',
    'name' => 'Название',
    'name_eng' => 'Оригинальное название',
    'activate_time' => 'Дата появления',
    'age' => 'Возрастная категория',
    'type' => 'Тип контента',
    'world_art' => 'WorldArt Оценка',
    'world_art_id' => 'WorldArt ID',
    'year' => 'Год выхода',
    'budget' => 'Бюджет',
    'poster' => 'Постер',
    'premier' => 'Дата премьеры (мировая)',
    'premier_rus' => 'Дата премьеры (РФ)',
    'quality' => 'Качество',
    'rate_mpaa' => 'Рейтинг MPAA',
    'slogan' => 'Слоган',
    'time' => 'Длительность',
    'description' => 'Описание',
    'fees_rus' => 'Кассовые сборы (РФ)',
    'fees_use' => 'Кассовые сборы (США)',
    'fees_world' => 'Кассовые сборы (мир)',
    'design' => 'Художники',
    'director' => 'Режиссеры',
    'editor' => 'Монтажеры',
    'genre' => 'Жанры',
    'operator' => 'Операторы',
    'producer' => 'Продюсеры',
    'screenwriter' => 'Сценаристы',
    'voiceActing' => 'Озвучка',
    'actors' => 'Актеры (главные роли)',
    'actors_dubl' => 'Актеры дубляжа',
    'trivia' => 'Знаете ли вы...',
    'trailers' => 'Трейлеры',
    'seasons' => 'Сезоны',
    'episodes' => 'Эпизоды',
    'total_episodes' => 'Общее количество серий',
    'collection' => 'Коллекции',
    'country' => 'Страны',
    'sequels' => 'Сиквелы и приквелы' 
];

// Формирование вкладок
$tabs = [
    'main' => [
        ['title' => 'API ключ балансера', 'description' => 'Введите ваш API ключ для доступа к балансеру (Обязательно)', 'input' => '<input name="config[api_key]" class="form-control custom-input" type="text" value="' . ($config_mod['api_key'] ?? '') . '">'],
        ['title' => 'API ключ TMDB', 'description' => 'Введите ваш API ключ для TMDB (Для постеров)', 'input' => '<input name="config[tmdb_api_key]" class="form-control custom-input" type="text" value="' . ($config_mod['tmdb_api_key'] ?? '') . '">'],
        ['title' => 'API-ключ Alloha', 'description' => 'Введите API-ключ для доступа к API Alloha (для получения TMDB ID)', 'input' => '<input name="config[alloha_api_key]" class="form-control custom-input" type="text" value="' . ($config_mod['alloha_api_key'] ?? '') . '">'],
        ['title' => 'API ключ Kinopoisk Unofficial', 'description' => 'Введите ваш API ключ для kinopoiskapiunofficial.tech (для сиквелов и приквелов)', 'input' => '<input name="config[kinopoisk_unofficial_api_key]" class="form-control custom-input" type="text" value="' . ($config_mod['kinopoisk_unofficial_api_key'] ?? '') . '">']
    ],
    'xfields' => [
        ['title' => 'Основные идентификаторы', 'description' => 'Выберите дополнительные поля, в которых хранятся ID из внешних баз (Кинопоиск, IMDb, WorldArt). Хотя бы одно поле должно быть указано для корректной работы.', 'input' => '', 'colspan' => true],
        ['title' => 'Кинопоиск ID', 'description' => 'Выберите дополнительное поле, в котором хранится ID Кинопоиска', 'input' => makeDropDown($xfields, 'config[kinopoisk_field]', $config_mod['kinopoisk_field'] ?? ''), 'is_main_id' => true],
        ['title' => 'IMDB ID', 'description' => 'Выберите дополнительное поле, в котором хранится ID IMDB', 'input' => makeDropDown($xfields, 'config[imdb_field]', $config_mod['imdb_field'] ?? ''), 'is_main_id' => true],
        ['title' => 'World Art ID', 'description' => 'Выберите дополнительное поле, в котором хранится ID World Art', 'input' => makeDropDown($xfields, 'config[worldart_field]', $config_mod['worldart_field'] ?? ''), 'is_main_id' => true],
        ['title' => 'TMDB ID', 'description' => 'Выберите дополнительное поле, в котором хранится ID TMDB (для постеров и т.д.)', 'input' => makeDropDown($xfields, 'config[tmdb_field]', $config_mod['tmdb_field'] ?? ''), 'is_main_id' => true],
        ['title' => 'Сопоставление дополнительных полей', 'description' => 'Выберите поле API для каждого дополнительного поля DLE', 'input' => '', 'colspan' => true]
    ],
    'posters' => [
        ['title' => 'Загружать постер', 'description' => 'Включая опцию, вы будете загружать постер на свой сервер', 'input' => '<label class="switch"><input type="checkbox" name="config[poster_upload]" value="1"' . (isset($config_mod['poster_upload']) && $config_mod['poster_upload'] ? ' checked' : '') . '><span class="slider round"></span></label>'],
        ['title' => 'Загружать постеры с TMDB', 'description' => 'Включая опцию, вы будете загружать постеры с TMDB, если доступен API-ключ', 'input' => '<label class="switch"><input type="checkbox" name="config[poster_tmdb_upload]" value="1"' . (isset($config_mod['poster_tmdb_upload']) && $config_mod['poster_tmdb_upload'] ? ' checked' : '') . '><span class="slider round"></span></label>'],
        ['title' => 'Конвертировать постер в единый формат изображений', 'description' => 'Вы можете включить автоматическое конвертирование постера при его загрузке на сервер в единый формат. Рекомендуется выбирать современный формат, например WEBP или AVIF, для экономии трафика и ускорения загрузки страниц.', 'input' => makeDropDown(['' => 'Не конвертировать', 'png' => 'PNG', 'jpeg' => 'JPEG', 'webp' => 'WEBP', 'avif' => 'AVIF'], 'config[poster_format]', $config_mod['poster_format'] ?? '')],
        ['title' => 'Укажите размер постера', 'description' => 'Существует две возможности использования данной настройки:<br>Первая: Вы задаете максимальный размер в пикселях любой из сторон загружаемой картинки, при превышении которого будет создаваться уменьшенная копия. Например: 400<br>Вторая: Вы задаете ширину и высоту уменьшенной копии изображения в формате ширина x высота. Например: 100x100.<br>Вы можете указать 0, если хотите оставить оригинальный размер постера.', 'input' => '<input name="config[poster_size]" class="form-control custom-input" type="text" value="' . ($config_mod['poster_size'] ?? '0') . '">'],
        ['title' => 'Качество сжатия JPEG и WEBP формата постера', 'description' => 'Качество сжатия JPEG и WEBP постера при копировании на сервер. Выставляется значение от 0 до 100. Чем больше значение, тем лучше качество изображений, но также больше их вес на сервере.', 'input' => '<input name="config[poster_quality]" class="form-control custom-input" type="number" min="0" max="100" value="' . ($config_mod['poster_quality'] ?? '80') . '">']
    ],
    'autoupdate' => [ 
        ['title' => 'Настройки автообновления', 'description' => 'Настройте параметры автоматического обновления контента', 'input' => '<fieldset><legend>Параметры автообновления</legend>' .
            makeCheckbox('config[autoupdate_enabled]', 'Включить автообновление', $config_mod['autoupdate_enabled'] ?? false) . '<br>' .
            makeCheckbox('config[force_fill_fields]', 'Заполнять поля принудительно', $config_mod['force_fill_fields'] ?? false) . '<br>' .
            makeCheckbox('config[update_date_on_series]', 'Поднимать новость при обновлении серий', $config_mod['update_date_on_series'] ?? false) . '<br>' .
            makeCheckbox('config[update_ratings_enabled]', 'Обновлять полные рейтинги (оценки и голоса) из Kinopoisk', $config_mod['update_ratings_enabled'] ?? false, 'Включите, чтобы обновлять оценки и количество голосов Кинопоиска и IMDb из официального API Kinopoisk. Без галочки обновляются только оценки из API балансера') . '<br>' .
            makeCheckbox('config[autoupdate_tmdb_id]', 'Обновлять TMDB ID из Alloha', $config_mod['autoupdate_tmdb_id'] ?? false, 'Включите, чтобы автоматически заполнять TMDB ID из API Alloha, если поле пустое. Если поле уже заполнено, оно не будет перезаписано.') . '<br>' .
            makeCheckbox('config[autoupdate_sequels]', 'Обновлять франшизы (сиквелы и приквелы)', $config_mod['autoupdate_sequels'] ?? false, 'Включите, чтобы автоматически обновлять данные о сиквелах и приквелах из API.') . '<br>' .
            makeCheckbox('config[filters][remove_latin]', 'Фильтровать латинские имена', $config_mod['filters']['remove_latin'] ?? false, 'Включите, чтобы удалять имена, не содержащие кириллицу, для полей "Актеры" и "Режиссеры".') . '</fieldset>'],
        ['title' => 'Поля для фильтрации латинских имён', 'description' => 'Укажите названия дополнительных полей (xfields), в которых хранятся данные об актерах и режиссерах, для фильтрации латинских имён.', 'input' => '', 'colspan' => true],
        ['title' => 'Поле для актеров', 'description' => 'Введите название дополнительного поля (xfield) для актеров', 'input' => '<input name="config[filters][actors_field]" class="form-control custom-input" type="text" value="' . ($config_mod['filters']['actors_field'] ?? 'actors') . '">'],
        ['title' => 'Поле для режиссеров', 'description' => 'Введите название дополнительного поля (xfield) для режиссеров', 'input' => '<input name="config[filters][directors_field]" class="form-control custom-input" type="text" value="' . ($config_mod['filters']['directors_field'] ?? 'director') . '">'],
        ['title' => 'Количество режиссеров и актеров', 'description' => 'Укажите максимальное количество актеров и режиссеров для сохранения в дополнительных полях', 'input' => '', 'colspan' => true],
        ['title' => 'Актеры', 'description' => '', 'input' => '<input name="config[max_actors]" class="form-control custom-input" type="number" min="0" value="' . ($config_mod['max_actors'] ?? '10') . '">'],
        ['title' => 'Режиссеры', 'description' => '', 'input' => '<input name="config[max_directors]" class="form-control custom-input" type="number" min="0" value="' . ($config_mod['max_directors'] ?? '5') . '">'],
        ['title' => 'Интеграция с шаблоном', 'description' => 'Для корректной работы автообновления необходимо добавить следующий код в ваш шаблон <code>fullstory.tpl</code>:<br><code>{include file="engine/modules/content_updater.php"}</code>', 'input' => '']
    ],
    'cache' => [
        ['title' => 'Настройки кэширования', 'description' => 'Настройте параметры кэширования данных API', 'input' => '', 'colspan' => true],
        ['title' => 'Включить кэширование', 'description' => 'Включите, чтобы кэшировать ответы API для ускорения работы', 'input' => '<label class="switch"><input type="checkbox" name="config[cache_enabled]" value="1"' . (isset($config_mod['cache_enabled']) && $config_mod['cache_enabled'] ? ' checked' : '') . '><span class="slider round"></span></label>'],
        ['title' => 'Время жизни кэша (в часах)', 'description' => 'Укажите, сколько часов кэш будет считаться актуальным (0 - отключить кэширование)', 'input' => '<input name="config[cache_lifetime]" class="form-control custom-input" type="number" min="0" value="' . ($config_mod['cache_lifetime'] ?? '24') . '">']
    ]
];

// Дополнение вкладки xfields
$main_id_fields = [
    $config_mod['kinopoisk_field'] ?? '',
    $config_mod['imdb_field'] ?? '',
    $config_mod['worldart_field'] ?? '',
    $config_mod['tmdb_field'] ?? ''
];
foreach ($xfields as $field_name => $field_title) {
    if ($field_name && !in_array($field_name, $main_id_fields)) {
        $selected_api = $config_mod['xfields_mapping'][$field_name] ?? '';
        $tabs['xfields'][] = [
            'title' => $field_title,
            'description' => '',
            'input' => makeDropDown($api_fields, "config[xfields_mapping][$field_name]", $selected_api)
        ];
    }
}

// Генерация HTML для вкладок
function renderTab($items) {
    ob_start();
    foreach ($items as $item) {
        $colspan_attr = isset($item['colspan']) ? ' colspan="2"' : '';
        $td_class = isset($item['is_main_id']) ? ' style="font-weight: bold;"' : '';
        ?>
        <tr>
            <td class="col-xs-6 col-sm-6 col-md-7 white-line"<?php echo $td_class; ?>>
                <h6 class="media-heading text-semibold"><?php echo $item['title']; ?></h6>
                <span class="text-muted text-size-small"><?php echo $item['description']; ?></span>
            </td>
            <td class="col-xs-6 col-sm-6 col-md-5 white-line"<?php echo $colspan_attr; ?>>
                <?php echo $item['input']; ?>
            </td>
        </tr>
        <?php
    }
    return ob_get_clean();
}

// Обработка действий
checkAdminAccess($user_group, $member_id, $lang);

if (isset($_REQUEST['action'])) {
    if ($_REQUEST['action'] === 'config') {
        $config_mod = is_array($_POST['config']) ? $_POST['config'] : [];
        $api_key = trim($config_mod['api_key'] ?? '');
        if ($api_key) {
            $api_response = checkApiKey($api_key);
            if ($api_response['success']) {
                file_put_contents(ENGINE_DIR . "/data/{$mod}.config", serialize($config_mod));
                die('{"success":true,"message":"Настройки успешно сохранены"}');
            }
            die('{"success":false,"message":"' . htmlspecialchars($api_response['message']) . '"}');
        }
        die('{"success":false,"message":"API ключ не указан"}');
    }
    
    if ($_REQUEST['action'] === 'clear_cache') {
        require_once DLEPlugins::Check(ENGINE_DIR . '/modules/cache_manager.php');
        $deleted = clearCache();
        die('{"success":true,"message":"Кэш успешно очищен. Удалено файлов: ' . $deleted . '"}');
    }
}

echoheader('<i class="fa fa-cogs position-left"></i><span class="text-semibold">' . $__name . '</span>', $__descr);
?>

<div class="panel panel-flat">
    <div class="panel-heading">
        <ul class="nav nav-tabs nav-tabs-solid">
            <li class="active"><a href="#main" data-toggle="tab"><i class="fa fa-home position-left"></i> Настройки</a></li>
            <li><a href="#xfields" data-toggle="tab"><i class="fa fa-plus-square position-left"></i> Дополнительные поля</a></li>
            <li><a href="#posters" data-toggle="tab"><i class="fa fa-image position-left"></i> Постеры</a></li>
            <li><a href="#autoupdate" data-toggle="tab"><i class="fa fa-refresh position-left"></i> Автообновление</a></li>
            <li><a href="#cache" data-toggle="tab"><i class="fa fa-database position-left"></i> Кэш</a></li>
        </ul>
    </div>
    <form id="config" method="post">
        <div class="panel-body">
            <div class="tab-content">
                <?php foreach ($tabs as $id => $items): ?>
                    <div class="tab-pane<?php echo $id === 'main' ? ' active' : ''; ?>" id="<?php echo $id; ?>">
                        <table class="table table-normal table-hover compact-table">
                            <tbody><?php echo renderTab($items); ?></tbody>
                        </table>
                    </div>
                <?php endforeach; ?>
            </div>
        </div>
        <div class="panel-footer">
            <button type="button" onclick="save_config(); return false;" class="btn bg-teal btn-raised legitRipple">Сохранить настройки</button>
            <button type="button" onclick="clear_cache(); return false;" class="btn bg-danger btn-raised legitRipple" style="margin-left: 10px;">Очистить кэш</button>
        </div>
    </form>
</div>

<style>
.compact-table { font-size: 14px; }
.compact-table tr td { padding: 8px 12px !important; }
.compact-table .white-line { border-bottom: 1px solid #e5e5e5; }
.compact-table h6 { font-size: 15px; margin: 5px 0; }
.compact-table .text-muted { font-size: 12px; }
.custom-select, .custom-input, .custom-textarea {
    width: 100%; padding: 8px; font-size: 14px; border: 1px solid #d1d1d1; border-radius: 4px;
}
.custom-select:focus, .custom-input:focus, .custom-textarea:focus {
    outline: none; border-color: #1e88e5; box-shadow: 0 0 5px rgba(30, 136, 229, 0.3);
}
.custom-textarea { resize: vertical; }
.tooltip-icon {
    display: inline-block; margin-left: 5px; font-size: 14px; color: #666; cursor: help;
    vertical-align: middle; border-radius: 50%; width: 16px; height: 16px; line-height: 16px;
    text-align: center; background-color: #e0e0e0; transition: all 0.3s;
}
.tooltip-icon:hover { color: #fff; background-color: #1e88e5; }
.tooltip-icon::after {
    content: attr(data-tooltip); position: absolute; background-color: #1e88e5; color: #fff;
    padding: 5px 10px; border-radius: 4px; font-size: 12px; white-space: nowrap;
    top: -35px; left: 50%; transform: translateX(-50%); opacity: 0; visibility: hidden;
    transition: opacity 0.3s; z-index: 1000;
}
.tooltip-icon:hover::after { opacity: 1; visibility: visible; }
.btn.bg-teal, .btn.bg-danger { padding: 8px 16px; font-size: 14px; border-radius: 4px; transition: background-color 0.3s; }
.btn.bg-teal:hover { background-color: #1565c0; }
.btn.bg-danger:hover { background-color: #c62828; }
.nav-tabs-solid > li > a { padding: 8px 16px; font-size: 14px; border-radius: 4px 4px 0 0; }
.nav-tabs-solid > li.active > a { background-color: #f5f5f5; }
.panel-body { padding: 15px; }
.panel-footer { padding: 10px 15px; }
.switch {
    position: relative; display: inline-block; width: 60px; height: 28px; margin: 0; vertical-align: middle;
}
.switch input { opacity: 0; width: 0; height: 0; }
.slider {
    position: absolute; cursor: pointer; top: 0; left: 0; right: 0; bottom: 0; background-color: #e0e0e0;
    transition: background-color 0.3s ease, box-shadow 0.3s ease; border-radius: 28px;
    box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
}
.slider:before {
    position: absolute; content: ""; height: 22px; width: 22px; left: 3px; bottom: 3px;
    background-color: #fff; transition: transform 0.3s ease, background-color 0.3s ease; border-radius: 50%;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}
input:checked + .slider { background-color: #1e88e5; box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.2); }
input:checked + .slider:before { transform: translateX(32px); background-color: #fff; }
input:focus + .slider { box-shadow: 0 0 8px rgba(30, 136, 229, 0.5); }
.slider.round { border-radius: 28px; }
.slider.round:before { border-radius: 50%; }
.custom-checkbox {
    position: relative; padding-left: 28px; margin-bottom: 8px; cursor: pointer; font-size: 14px; user-select: none;
}
.custom-checkbox input { position: absolute; opacity: 0; cursor: pointer; height: 0; width: 0; }
.custom-checkbox .checkmark {
    position: absolute; top: 2px; left: 0; height: 18px; width: 18px; background-color: #fff;
    border: 1px solid #d1d1d1; border-radius: 3px; transition: all 0.3s;
}
.custom-checkbox input:checked ~ .checkmark { background-color: #1e88e5; border-color: #1e88e5; }
.custom-checkbox .checkmark:after { content: ""; position: absolute; display: none; }
.custom-checkbox input:checked ~ .checkmark:after { display: block; }
.custom-checkbox .checkmark:after {
    left: 6px; top: 2px; width: 5px; height: 10px; border: solid white;
    border-width: 0 2px 2px 0; transform: rotate(45deg);
}
</style>

<script>
function save_config() {
    $.post('<?php echo $config['admin_path']; ?>?mod=<?php echo $mod; ?>&action=config', $('#config').serialize(), function(data) {
        DLEalert(JSON.parse(data).message, '<?php echo $__name; ?>');
    });
}

function clear_cache() {
    if (confirm('Вы уверены, что хотите очистить весь кэш?')) {
        $.post('<?php echo $config['admin_path']; ?>?mod=<?php echo $mod; ?>&action=clear_cache', {}, function(data) {
            DLEalert(JSON.parse(data).message, '<?php echo $__name; ?>');
        });
    }
}
</script>

<?php echofooter(); ?>]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/modules/api_client.php">
		<operation action="create">
			<replacecode><![CDATA[<?php
if (!defined('DATALIFEENGINE')) die("Hacking attempt!");

/**
 * Проверка валидности API ключа
 * @param string $api_key
 * @return array ['success' => bool, 'message' => string]
 */
function checkApiKey($api_key) {
    $url = "https://api.bhcesh.me/checked-key?key=" . urlencode($api_key);
    $result = fetchApi($url);
    $body = trim($result['body']);

    if ($result['status'] === 200 && in_array($body, ['OK', '"OK"'])) {
        return ['success' => true, 'message' => 'API ключ валиден'];
    } elseif ($result['status'] === 400) {
        $error = json_decode($body, true);
        return ['success' => false, 'message' => $error['message'] ?? 'Ошибка API'];
    }
    return ['success' => false, 'message' => 'Ошибка API или сети: ' . $result['error']];
}

/**
 * Универсальный cURL-запрос 
 * @param string $url
 * @param array $options Дополнительные параметры, включая 'type' для XML/JSON
 * @return array ['status' => int, 'body' => string, 'error' => string]
 */
function fetchApi($url, $options = []) {
    $ch = curl_init($url);
    $headers = [
        'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0',
        'Accept: ' . ($options['type'] === 'xml' ? 'application/xml' : 'application/json'),
        'Accept-Language: ' . ($options['type'] === 'xml' ? 'en-US,en;q=0.5' : 'ru-RU,ru;q=0.9,en;q=0.8')
    ];
    curl_setopt_array($ch, [
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_TIMEOUT => $options['timeout'] ?? 10,
        CURLOPT_SSL_VERIFYPEER => false,
        CURLOPT_HTTPHEADER => $headers
    ]);

    $attempts = $options['attempts'] ?? 3;
    $result = ['status' => 0, 'body' => '', 'error' => ''];
    while ($attempts--) {
        $body = curl_exec($ch);
        $status = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        $error = curl_error($ch);
        if ($status === 200 && $body !== false) {
            $result = ['status' => $status, 'body' => $body, 'error' => ''];
            break;
        } elseif ($status === 429) {
            error_log("Rate limit hit for URL: $url");
            sleep(2);
            continue;
        } elseif ($status === 401 || $status === 402) {
            error_log("API key invalid or quota exceeded for URL: $url");
            break;
        }
        $result = ['status' => $status, 'body' => '', 'error' => $error ?: "HTTP $status"];
    }
    curl_close($ch);
    return $result;
}

/**
 * Фильтрует имена, удаляя те, что не содержат кириллицу
 * @param string|array $str Список имён через запятую или массив
 * @param int $limit Максимальное количество имён
 * @return string Отфильтрованный список имён
 */
function filterCyrillicNames($str, $limit) {
    $names = is_array($str) ? array_map('trim', $str) : array_map('trim', explode(',', $str));
    $filtered = array_filter($names, fn($name) => preg_match('/[а-яА-ЯёЁ]/u', $name));
    return implode(', ', array_slice($filtered, 0, $limit));
}]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/modules/content_updater.php">
		<operation action="create">
			<replacecode><![CDATA[<?php
if (!defined('DATALIFEENGINE')) {
    header("HTTP/1.1 403 Forbidden");
    header('Location: ../../');
    die("Hacking attempt!");
}

global $db, $row, $config;

// Установка лимитов PHP
ini_set('memory_limit', '256M');
ini_set('max_execution_time', 60);

// Парсинг xfields
function parseXFields($xfields_str) {
    if (empty($xfields_str)) return [];
    $xfields = [];
    foreach (explode('||', $xfields_str) as $xf) {
        if (empty($xf)) continue;
        [$key, $value] = explode('|', $xf, 2);
        $xfields[trim($key)] = trim($value);
    }
    return $xfields;
}

// Сохранение xfields
function saveXFields($xfields) {
    $xfields_str = [];
    foreach ($xfields as $key => $value) {
        if ($value !== '') {
            $key = preg_replace('/[^a-zA-Z0-9_-]/', '', $key);
            $xfields_str[] = "$key|$value";
        }
    }
    return implode('||', $xfields_str);
}

// Получение данных из API
function fetchApiData($url, $cache_enabled, $cache_lifetime, $headers = []) {
    $response = $cache_enabled ? getCachedData($url, $cache_lifetime) : null;
    if (empty($response)) {
        $response_raw = fetchApi($url, ['headers' => $headers]);
        if ($response_raw['status'] !== 200 || empty($response_raw['body'])) {
            return null;
        }
        $response = json_decode($response_raw['body'], true);
        if (json_last_error() !== JSON_ERROR_NONE) {
            return null;
        }
        if ($cache_enabled) {
            saveCachedData($url, $response);
        }
    }
    return $response;
}

try {
    $mod_config_path = defined('ENGINE_DIR') ? ENGINE_DIR . "/data/admin_interface.config" : dirname(__FILE__) . "/data/admin_interface.config";
    if (!file_exists($mod_config_path)) return;

    static $config_mod = null;
    if ($config_mod === null) {
        $config_mod = unserialize(file_get_contents($mod_config_path));
    }
    if (empty($config_mod['autoupdate_enabled']) || empty($config_mod['api_key'])) return;
    if (empty($row['id']) || empty($row['xfields'])) return;

    $fresh_row = $db->super_query("SELECT xfields FROM " . PREFIX . "_post WHERE id='{$row['id']}'");
    if (!$fresh_row) return;
    $xfieldsdata = parseXFields($fresh_row['xfields']) ?: [];

    $kp_id = !empty($config_mod['kinopoisk_field']) ? trim($xfieldsdata[$config_mod['kinopoisk_field']] ?? '') : '';
    $imdb_id = !empty($config_mod['imdb_field']) ? trim($xfieldsdata[$config_mod['imdb_field']] ?? '') : '';
    $wa_id = !empty($config_mod['worldart_field']) ? trim($xfieldsdata[$config_mod['worldart_field']] ?? '') : '';
    if (empty($kp_id) && empty($imdb_id) && empty($wa_id)) return;

    $token = urlencode($config_mod['api_key']);
    $query = $kp_id ? "kinopoisk_id=$kp_id" : ($imdb_id ? "imdb_id=$imdb_id" : "world_art_id=$wa_id");
    $url = "https://api.bhcesh.me/franchise/details?token=$token&$query";

    require_once DLEPlugins::Check(ENGINE_DIR . '/modules/api_client.php');
    require_once DLEPlugins::Check(ENGINE_DIR . '/modules/cache_manager.php');
    require_once DLEPlugins::Check(ENGINE_DIR . '/modules/poster_handler.php');
    require_once DLEPlugins::Check(ENGINE_DIR . '/modules/rating_updater.php');

    $cache_enabled = !empty($config_mod['cache_enabled']) && !empty($config_mod['cache_lifetime']);
    $response = fetchApiData($url, $cache_enabled, $config_mod['cache_lifetime']);
    
    // Обновление sequels
    $sequels_field = array_search('sequels', $config_mod['xfields_mapping'] ?? []) ?: null;
    $sequels_data = isset($xfieldsdata[$sequels_field]) ? $xfieldsdata[$sequels_field] : '';
    $kinopoisk_unofficial_api_key = $config_mod['kinopoisk_unofficial_api_key'] ?? '';
    $updated = false;
    $updated_fields = [];

    if ($config_mod['autoupdate_sequels'] && $kp_id && ($sequels_field && empty($sequels_data))) {
        $kinopoisk_ids = [];
        $success = false;

        // 1. Пробуем запрос к kinopoiskapiunofficial
        if ($kinopoisk_unofficial_api_key) {
            $api_request_url = "https://kinopoiskapiunofficial.tech/api/v2.1/films/{$kp_id}/sequels_and_prequels";
            $cache_key = "sequels_kinopoisk_{$kp_id}";
            $api_data = fetchApiData($api_request_url, $cache_enabled, $config_mod['cache_lifetime'], ['X-API-KEY: ' . $kinopoisk_unofficial_api_key]);
            if ($api_data && is_array($api_data)) {
                $kinopoisk_ids[] = $kp_id;
                foreach ($api_data as $film) {
                    if (!empty($film['filmId']) && $film['filmId'] != $kp_id) {
                        $kinopoisk_ids[] = $film['filmId'];
                    }
                }
                $success = true;
            }
        }

        // 2. Если запрос к kinopoiskapiunofficial не удался, используем bhcesh
        if (!$success && $response && !empty($response['parts'])) {
            foreach ($response['parts'] as $collaps_id) {
                $movie_api_url = "https://api.bhcesh.me/franchise/details?token={$token}&id={$collaps_id}";
                $movie_cache_key = "sequels_bhcesh_movie_{$collaps_id}";
                $movie_data = fetchApiData($movie_api_url, $cache_enabled, $config_mod['cache_lifetime']);
                if ($movie_data && !empty($movie_data['kinopoisk_id'])) {
                    $kinopoisk_ids[] = $movie_data['kinopoisk_id'];
                }
            }
            $success = true;
        }

        // Сохранение результатов
        if ($success && !empty($kinopoisk_ids)) {
            $xfieldsdata[$sequels_field] = implode(',', $kinopoisk_ids);
            $updated_fields[] = $sequels_field;
            $updated = true;
        }
    }

    // Обработка маппинга для sequels из API collection
    if ($sequels_field && !empty($config_mod['xfields_mapping'][$sequels_field]) && $config_mod['xfields_mapping'][$sequels_field] === 'collection' && !empty($response['collection'])) {
        $existing_value = $xfieldsdata[$sequels_field] ?? '';
        $new_value = is_array($response['collection']) ? implode(', ', array_slice($response['collection'], 0, 10)) : $response['collection'];
        if ($config_mod['force_fill_fields'] || empty(trim($existing_value))) {
            if ($existing_value !== $new_value) {
                $xfieldsdata[$sequels_field] = $new_value;
                $updated_fields[] = $sequels_field;
                $updated = true;
            }
        }
    }

    if (!$response) {
        if (!empty($config_mod['update_ratings_enabled']) && !empty($kp_id)) {
            $ratings = updateKinopoiskRatings($kp_id);
            $mapping_reverse = array_flip($config_mod['xfields_mapping'] ?? []);
            foreach (['kinopoisk_rate' => 'kinopoisk_rate', 'kinopoisk_votes' => 'kinopoisk_votes', 'imdb_rate' => 'imdb_rate', 'imdb_votes' => 'imdb_votes'] as $api_field => $rating_key) {
                $field = $mapping_reverse[$api_field] ?? null;
                if ($field && $ratings[$rating_key] !== ($api_field === 'kinopoisk_rate' || $api_field === 'imdb_rate' ? '0.0' : '0')) {
                    $xfieldsdata[$field] = $ratings[$rating_key];
                    $updated_fields[] = $field;
                    $updated = true;
                }
            }
        }
    }

    if (empty($response['id'])) return;

    $mapping_reverse = array_flip($config_mod['xfields_mapping'] ?? []);
    $last_season_field = $mapping_reverse['seasons'] ?? '';
    $last_episode_field = $mapping_reverse['episodes'] ?? '';
    $total_episodes_field = $mapping_reverse['total_episodes'] ?? '';
    $current_season = !empty($last_season_field) ? (int)($xfieldsdata[$last_season_field] ?? 0) : 0;
    $current_episode = !empty($last_episode_field) ? (int)($xfieldsdata[$last_episode_field] ?? 0) : 0;

    // Рассчет valid_seasons один раз
    $valid_seasons = [];
    if (!empty($response['seasons']) && is_array($response['seasons'])) {
        $valid_seasons = array_filter($response['seasons'], fn($season) => is_array($season) && isset($season['season']) && isset($season['episodes']) && is_array($season['episodes']));
        $valid_seasons = array_map(fn($season) => ['season' => $season['season'], 'episodes' => array_filter($season['episodes'], fn($episode) => is_array($episode) && !empty($episode['iframe_url']))], $valid_seasons);
    }
    $last_season = !empty($valid_seasons) ? max(array_column($valid_seasons, 'season')) : 0;
    $last_season_episodes = array_filter($valid_seasons, fn($season) => $season['season'] == $last_season);
    $last_episode = !empty($last_season_episodes) ? max(array_column(reset($last_season_episodes)['episodes'], 'episode')) : 0;
    $total_episodes = array_sum(array_map('count', array_column($valid_seasons, 'episodes')));

    // Обработка TMDB ID
    $tmdb_field = $config_mod['tmdb_field'] ?? '';
    if (!empty($tmdb_field) && !empty($kp_id) && !empty($config_mod['autoupdate_tmdb_id']) && !empty($config_mod['alloha_api_key']) && empty($xfieldsdata[$tmdb_field])) {
        $tmdb_url = "https://api.apbugall.org/?token=" . urlencode($config_mod['alloha_api_key']) . "&kp=" . urlencode($kp_id);
        $tmdb_response = fetchApiData($tmdb_url, $cache_enabled, $config_mod['cache_lifetime']);
        if ($tmdb_response && !empty($tmdb_response['data']['id_tmdb'])) {
            $xfieldsdata[$tmdb_field] = $tmdb_response['data']['id_tmdb'];
            $updated_fields[] = $tmdb_field;
            $updated = true;
        }
    }

    // Обработка постера
    $category_ids = !empty($row['category']) ? array_map('intval', explode(',', $row['category'])) : [];
    $xfieldsdata = handlePoster($row['id'], $xfieldsdata, $config_mod, $category_ids, $response);

    // Обработка дополнительных полей
    $poster_field = $mapping_reverse['poster'] ?? null;
    $quality_field = $mapping_reverse['quality'] ?? null;
    $rating_fields = ['kinopoisk_rate', 'kinopoisk_votes', 'imdb_rate', 'imdb_votes'];

    foreach ((array)$config_mod['xfields_mapping'] as $xfield => $api_field) {
        if (empty($xfield) || empty($api_field) || $xfield === $poster_field || $xfield === $sequels_field || ($config_mod['update_ratings_enabled'] && in_array($api_field, $rating_fields))) {
            continue;
        }

        $existing_value = $xfieldsdata[$xfield] ?? '';
        $new_value = $response[$api_field] ?? '';
        if ($api_field === 'kinopoisk_rate') {
            $new_value = $response['kinopoisk'] ?? '';
        } elseif ($api_field === 'imdb_rate') {
            $new_value = $response['imdb'] ?? '';
        } elseif ($api_field === 'kinopoisk_votes' || $api_field === 'imdb_votes') {
            $new_value = '';
        } elseif ($api_field === 'seasons') {
            $new_value = $last_season;
        } elseif ($api_field === 'episodes') {
            $new_value = $last_episode;
        } elseif ($api_field === 'total_episodes') {
            $new_value = $total_episodes;
        } elseif ($api_field === 'trailers' && is_array($new_value) && !empty($new_value[0]['iframe_url'])) {
            $new_value = $new_value[0]['iframe_url'];
        } elseif (is_array($new_value)) {
            $actors_field = $config_mod['filters']['actors_field'] ?? 'actors';
            $directors_field = $config_mod['filters']['directors_field'] ?? 'director';
            $limit = $api_field === $actors_field ? ($config_mod['max_actors'] ?? 10) : ($api_field === $directors_field ? ($config_mod['max_directors'] ?? 5) : 10);
            $new_value = implode(', ', array_slice(array_values($new_value), 0, $limit));
        }

        if ($api_field === 'description' && strlen($new_value) > 10000) {
            $new_value = substr($new_value, 0, 10000) . '...';
        }

        if (!trim($new_value)) continue;

        if ($api_field !== 'seasons' && $api_field !== 'episodes' && $api_field !== 'total_episodes') {
            if ($xfield === $quality_field && !empty($config_mod['force_fill_fields'])) {
                if ($existing_value !== $new_value) {
                    $xfieldsdata[$xfield] = $new_value;
                    $updated_fields[] = $xfield;
                    $updated = true;
                }
            } elseif (empty(trim($existing_value))) {
                if ($existing_value !== $new_value) {
                    $xfieldsdata[$xfield] = $new_value;
                    $updated_fields[] = $xfield;
                    $updated = true;
                }
            }
        } else {
            if ($existing_value != $new_value) {
                $xfieldsdata[$xfield] = $new_value;
                $updated_fields[] = $xfield;
                $updated = true;
            }
        }
    }

    // Обновление даты при изменении сезонов или серий
    $update_date_sql = '';
    if ($config_mod['update_date_on_series'] && $last_season > $current_season || ($last_season == $current_season && $last_episode > $current_episode)) {
        $updated = true;
        $update_date_sql = ", date=FROM_UNIXTIME(" . time() . ")";
    }

    // Фильтрация латинских имён
    if ($config_mod['filters']['remove_latin'] ?? false) {
        $fields_to_filter = [
            $config_mod['filters']['actors_field'] ?? 'actors' => $config_mod['max_actors'] ?? 10,
            $config_mod['filters']['directors_field'] ?? 'director' => $config_mod['max_directors'] ?? 5
        ];
        foreach ($fields_to_filter as $api_field => $limit) {
            $xfield = $mapping_reverse[$api_field] ?? null;
            if ($xfield && !empty($xfieldsdata[$xfield])) {
                $filtered_value = filterCyrillicNames($xfieldsdata[$xfield], $limit);
                if ($filtered_value !== $xfieldsdata[$xfield]) {
                    $xfieldsdata[$xfield] = $filtered_value;
                    $updated_fields[] = $xfield;
                    $updated = true;
                }
            }
        }
    }

    // Обновление рейтингов
    if (!empty($config_mod['update_ratings_enabled']) && !empty($kp_id)) {
        $ratings = updateKinopoiskRatings($kp_id);
        foreach (['kinopoisk_rate' => 'kinopoisk_rate', 'kinopoisk_votes' => 'kinopoisk_votes', 'imdb_rate' => 'imdb_rate', 'imdb_votes' => 'imdb_votes'] as $api_field => $rating_key) {
            $field = $mapping_reverse[$api_field] ?? null;
            if ($field && $ratings[$rating_key] !== ($api_field === 'kinopoisk_rate' || $api_field === 'imdb_rate' ? '0.0' : '0')) {
                $xfieldsdata[$field] = $ratings[$rating_key];
                $updated_fields[] = $field;
                $updated = true;
            }
        }
    }

    // Сохранение изменений
    if ($updated || !empty($xfieldsdata[$poster_field])) {
        $xfieldsnew = saveXFields($xfieldsdata);
        if (strlen($xfieldsnew) > 65535) return;
        $db->query("UPDATE " . PREFIX . "_post SET xfields='" . $db->safesql($xfieldsnew) . "'$update_date_sql WHERE id='{$row['id']}'");
    }
} catch (Exception $e) {
    error_log("Content updater error: " . $e->getMessage());
}]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/modules/cache_manager.php">
		<operation action="create">
			<replacecode><![CDATA[<?php
if (!defined('DATALIFEENGINE')) die("Hacking attempt!");

/**
 * Проверяет наличие и актуальность кэша
 * @param string $cache_key
 * @param int $cache_lifetime
 * @return mixed|null
 */
function getCachedData($cache_key, $cache_lifetime) {
    $cache_dir = ENGINE_DIR . '/rewall_cache/';
    $cache_file = $cache_dir . 'rewall_' . md5($cache_key) . '.tmp';

    if (!file_exists($cache_file) || ($cache_lifetime > 0 && (time() - filemtime($cache_file)) > $cache_lifetime * 3600)) {
        if (file_exists($cache_file)) unlink($cache_file);
        return null;
    }

    return json_decode(file_get_contents($cache_file), true) ?: null;
}

/**
 * Сохраняет данные в кэш
 * @param string $cache_key
 * @param mixed $data
 * @return bool
 */
function saveCachedData($cache_key, $data) {
    $cache_dir = ENGINE_DIR . '/rewall_cache/';
    if (!is_dir($cache_dir)) mkdir($cache_dir, 0755, true);

    return file_put_contents($cache_dir . 'rewall_' . md5($cache_key) . '.tmp', json_encode($data)) !== false;
}

/**
 * Очищает весь кэш
 * @return int
 */
function clearCache() {
    $cache_dir = ENGINE_DIR . '/rewall_cache/';
    if (!is_dir($cache_dir)) return 0;

    $files = glob($cache_dir . '*.tmp');
    $deleted = 0;
    foreach ($files as $file) {
        if (is_file($file) && unlink($file)) $deleted++;
    }
    return $deleted;
}]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/modules/poster_handler.php">
		<operation action="create">
			<replacecode><![CDATA[<?php
if (!defined('DATALIFEENGINE')) die("Hacking attempt!");

/**
 * Удаляет старые файлы постеров (оптимизировано: объединены удаления)
 * @param string $directory
 * @param string $id
 * @param string $target_format
 * @param string $type_prefix
 */
function removeOldPoster($directory, $id, $target_format, $type_prefix = '') {
    if (!$id) return;
    $files = [
        rtrim($directory, '/') . "/poster_{$type_prefix}_{$id}.{$target_format}",
        rtrim($directory, '/') . "/poster_{$type_prefix}_{$id}.jpg"
    ];
    foreach ($files as $file) {
        if (file_exists($file)) unlink($file);
    }
}

/**
 * Загружает постер по списку URL
 * @param array $urls
 * @return string|null
 */
function downloadPoster($urls) {
    foreach ($urls as $url) {
        $response = fetchApi($url);
        if ($response['status'] === 200 && $response['body'] !== false) {
            return $response['body'];
        }
    }
    return null;
}

/**
 * Оптимизирует и конвертирует постер
 * @param string $source_path
 * @param string $target_path
 * @param string $target_format
 * @param string $poster_size
 * @param int $quality
 * @return bool
 */
function optimizePoster($source_path, $target_path, $target_format, $poster_size, $quality) {
    if (!file_exists($source_path) || filesize($source_path) > 10 * 1024 * 1024) return false;

    try {
        $imagick = new Imagick($source_path);
        $imagick->setResourceLimit(Imagick::RESOURCETYPE_MEMORY, 256 * 1024 * 1024);
        $imagick->setResourceLimit(Imagick::RESOURCETYPE_MAP, 256 * 1024 * 1024);
        $imagick->stripImage();
        $imagick->setImageBackgroundColor(new ImagickPixel('white'));

        if ($imagick->getImageAlphaChannel()) {
            $imagick->mergeImageLayers(Imagick::LAYERMETHOD_FLATTEN);
        }

        if ($poster_size) {
            if (strpos($poster_size, 'x') !== false) {
                list($width, $height) = array_map('intval', explode('x', $poster_size));
                $imagick->thumbnailImage($width, $height, true, false);
            } else {
                $imagick->thumbnailImage((int)$poster_size, (int)$poster_size, true, false);
            }
        }

        $format_settings = [
            'webp' => ['format' => 'webp', 'quality' => $quality, 'option' => ['webp:method' => '6']],
            'jpeg' => ['format' => 'jpeg', 'quality' => $quality],
            'png' => ['format' => 'png', 'quality' => 9],
            'avif' => ['format' => 'avif', 'quality' => $quality]
        ];

        if (!isset($format_settings[$target_format])) {
            $imagick->destroy();
            return false;
        }

        $settings = $format_settings[$target_format];
        $imagick->setImageFormat($settings['format']);
        $imagick->setImageCompressionQuality($settings['quality']);
        if (!empty($settings['option'])) {
            foreach ($settings['option'] as $key => $value) {
                $imagick->setOption($key, $value);
            }
        }

        $result = $imagick->writeImage($target_path);
        $imagick->destroy();
        return $result && file_exists($target_path);
    } catch (ImagickException $e) {
        error_log("Poster optimization error: " . $e->getMessage());
        return false;
    }
}

/**
 * Получает URL постеров из TMDB или API балансера
 * @param string|null $tmdb_id
 * @param string|null $kinopoisk_id
 * @param array $category_ids
 * @param bool $use_tmdb
 * @param string $api_key_tmdb
 * @param string $balancer_poster_url
 * @return array
 */
function getPosterUrls($tmdb_id, $kinopoisk_id, $category_ids, $use_tmdb, $api_key_tmdb, $balancer_poster_url) {
    $urls = [];
    $is_movie = in_array(1, $category_ids) || in_array(3, $category_ids) || in_array(5, $category_ids);
    $is_tv = in_array(2, $category_ids) || in_array(4, $category_ids) || in_array(6, $category_ids);

    if ($use_tmdb && $tmdb_id && $tmdb_id !== 'none' && !empty($api_key_tmdb)) {
        $base_url = "https://api.themoviedb.org/3";
        $endpoints = $is_tv ? ['tv'] : ($is_movie ? ['movie'] : ['tv', 'movie']);
        $tmdb_id_clean = preg_replace('/[^\w\-]/', '', $tmdb_id);

        if ($tmdb_id_clean) {
            foreach ($endpoints as $endpoint) {
                $tmdb_url = "$base_url/$endpoint/$tmdb_id_clean?api_key=$api_key_tmdb&language=ru-RU";
                $response = fetchApi($tmdb_url);
                if ($response['status'] === 200 && $response['body'] !== false) {
                    $data = json_decode($response['body'], true);
                    if (json_last_error() === JSON_ERROR_NONE && !isset($data['status_code']) && !empty($data['poster_path'])) {
                        $urls[] = "https://image.tmdb.org/t/p/w342" . $data['poster_path'];
                        $urls[] = "https://image.tmdb.org/t/p/w500" . $data['poster_path'];
                        return $urls;
                    }
                }
            }
        }
    }

    if ($balancer_poster_url) $urls[] = $balancer_poster_url;
    return $urls;
}

/**
 * Обрабатывает загрузку или сохранение ссылки на постер
 * @param int $news_id
 * @param array $xfields
 * @param array $config_mod
 * @param array $category_ids
 * @param array $response
 * @return array
 */
function handlePoster($news_id, $xfields, $config_mod, $category_ids, $response) {
    global $db;

    $tmdb_field = $config_mod['tmdb_field'] ?? '';
    $kinopoisk_field = $config_mod['kinopoisk_field'] ?? '';
    $tmdb_id = $tmdb_field && isset($xfields[$tmdb_field]) ? trim($xfields[$tmdb_field]) : (isset($xfields['tmdb_id']) ? trim($xfields['tmdb_id']) : null);
    $kinopoisk_id = $kinopoisk_field && isset($xfields[$kinopoisk_field]) ? trim($xfields[$kinopoisk_field]) : null;
    $poster_field = !empty($config_mod['xfields_mapping']) ? array_search('poster', $config_mod['xfields_mapping']) : null;

    if (!$poster_field || (!$tmdb_id && !$kinopoisk_id)) return $xfields;

    $use_tmdb = !empty($config_mod['poster_tmdb_upload']);
    $upload_to_server = !empty($config_mod['poster_upload']);
    $force_fill_fields = !empty($config_mod['force_fill_fields']);
    $target_format = $config_mod['poster_format'] ?? 'webp';
    $poster_size = $config_mod['poster_size'] ?? '0';
    $quality = (int)($config_mod['poster_quality'] ?? 80);
    $api_key_tmdb = $config_mod['tmdb_api_key'] ?? '';
    $balancer_poster_url = $response['poster'] ?? '';

    $is_movie = in_array(1, $category_ids) || in_array(3, $category_ids) || in_array(5, $category_ids);
    $is_tv = in_array(2, $category_ids) || in_array(4, $category_ids) || in_array(6, $category_ids);
    $type_prefix = $is_tv ? 'tv' : ($is_movie ? 'movie' : '');

    $base_upload_dir = ROOT_DIR . "/uploads/posts/";
    $monthly_dir = date('Y-m');
    $upload_dir = $base_upload_dir . $monthly_dir . "/";
    $poster_id = $tmdb_id ?: $kinopoisk_id;
    $poster_filename = $type_prefix ? "poster_{$type_prefix}_{$poster_id}.{$target_format}" : "poster_{$poster_id}.{$target_format}";
    $temp_poster_name = $type_prefix ? "poster_{$type_prefix}_{$poster_id}.jpg" : "poster_{$poster_id}.jpg";
    $temp_poster_path = rtrim($upload_dir, '/') . "/{$temp_poster_name}";
    $final_poster_path = rtrim($upload_dir, '/') . "/{$poster_filename}";
    $new_poster_path = "/uploads/posts/{$monthly_dir}/{$poster_filename}";

    $current_poster = $xfields[$poster_field] ?? '';
    $should_replace = $force_fill_fields || !$current_poster || ($use_tmdb && $tmdb_id && strpos($current_poster, 'tmdb') === false) || 
                      (!$use_tmdb && $kinopoisk_id && strpos($current_poster, 'bhcesh') === false && strpos($current_poster, 'imgilall') === false) || 
                      ($upload_to_server && $current_poster && !file_exists(ROOT_DIR . $current_poster));

    if (!$should_replace) return $xfields;

    if ($upload_to_server && $current_poster && file_exists(ROOT_DIR . $current_poster)) {
        unlink(ROOT_DIR . $current_poster);
    }
    if ($upload_to_server && ($tmdb_id || $kinopoisk_id)) {
        removeOldPoster($upload_dir, $tmdb_id, $target_format, $type_prefix);
        removeOldPoster($upload_dir, $kinopoisk_id, $target_format, $type_prefix);
    }

    $poster_urls = getPosterUrls($tmdb_id, $kinopoisk_id, $category_ids, $use_tmdb, $api_key_tmdb, $balancer_poster_url);
    if (empty($poster_urls)) return $xfields;

    if ($upload_to_server) {
        if (!is_dir($upload_dir)) mkdir($upload_dir, 0755, true);
        $poster_data = downloadPoster($poster_urls);
        if ($poster_data && file_put_contents($temp_poster_path, $poster_data) && optimizePoster($temp_poster_path, $final_poster_path, $target_format, $poster_size, $quality)) {
            if (file_exists($temp_poster_path)) unlink($temp_poster_path);
            if (file_exists($final_poster_path)) $xfields[$poster_field] = $new_poster_path;
        } else {
            if (file_exists($temp_poster_path)) unlink($temp_poster_path);
        }
    } else {
        $xfields[$poster_field] = $poster_urls[0];
    }

    return $xfields;
}]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/modules/rating_updater.php">
		<operation action="create">
			<replacecode><![CDATA[<?php
if (!defined('DATALIFEENGINE')) die("Hacking attempt!");

// Подключаем fetchApi из api_client.php
require_once DLEPlugins::Check(ENGINE_DIR . '/modules/api_client.php');

/**
 * Обновление рейтингов Кинопоиска и IMDb
 * @param string $kp_id
 * @return array
 */
function updateKinopoiskRatings($kp_id) {
    $rating_data = [
        'kinopoisk_rate' => '0.0',
        'kinopoisk_votes' => '0',
        'imdb_rate' => '0.0',
        'imdb_votes' => '0'
    ];

    if (!empty($kp_id) && is_numeric($kp_id)) {
        $response = fetchApi("https://rating.kinopoisk.ru/{$kp_id}.xml", ['type' => 'xml']); // Теперь используем объединенную fetchApi
        if ($response['body'] !== false) {
            $xml = @simplexml_load_string($response['body']);
            if ($xml !== false) {
                $rating_data = [
                    'kinopoisk_rate' => number_format((float)$xml->kp_rating, 1, '.', ''),
                    'kinopoisk_votes' => number_format((int)$xml->kp_rating['num_vote'], 0, '', ' '),
                    'imdb_rate' => number_format((float)$xml->imdb_rating, 1, '.', ''),
                    'imdb_votes' => number_format((int)$xml->imdb_rating['num_vote'], 0, '', ' ')
                ];
            }
        }
    }

    return $rating_data;
}]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/modules/show.full.php">
		<operation action="after">
			<searchcode><![CDATA[$tpl->set( '{full-story}', $row['full_story'] );]]></searchcode>
			<replacecode><![CDATA[// Проверка существования поля sequels в xfields.json
if (file_exists(ENGINE_DIR . '/data/xfields.json')) {
    $xfields_config = json_decode(file_get_contents(ENGINE_DIR . '/data/xfields.json'), true);
    if (json_last_error() === JSON_ERROR_NONE && isset($xfields_config['fields']) && !isset($xfields_config['fields']['sequels'])) {
        msg("error", "Ошибка модуля", "Поле 'sequels' не найдено в конфигурации дополнительных полей.");
    }
}

// Получаем данные sequels
$sequels_data = isset($xfieldsdata['sequels']) ? $xfieldsdata['sequels'] : '';

// Отображение блока sequels
if (!empty($sequels_data)) {
    $tpl->set('[sequels]', "");
    $tpl->set('[/sequels]', "");
    $tpl->set('{sequels_ids}', $sequels_data);
} else {
    $tpl->set_block("'\$$ sequels\ $$(.*?)\$$ /sequels\ $$'si", "");
    $tpl->set('{sequels_ids}', '');
}
]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
	<file name="engine/modules/functions.php">
		<operation action="before">
			<searchcode><![CDATA[if( preg_match( "#xfields=[\"](.+?)[\"]#i", $param_str, $match ) ) {]]></searchcode>
			<replacecode><![CDATA[// Определение функции xfieldsdataload, если она не существует
if (!function_exists('xfieldsdataload')) {
    function xfieldsdataload($xfields) {
        $data = [];
        if (empty($xfields)) return $data;
        $pairs = explode('||', $xfields);
        foreach ($pairs as $pair) {
            if (empty($pair)) continue;
            $pair_parts = explode('|', $pair, 2);
            if (count($pair_parts) < 2) continue;
            list($name, $value) = $pair_parts;
            $name = str_replace("&#124;", "|", $name);
            $name = str_replace("__NEWL__", "\r\n", $name);
            $value = str_replace("&#124;", "|", $value);
            $value = str_replace("__NEWL__", "\r\n", $value);
            $value = strip_tags($value);
            $data[$name] = $value;
        }
        return $data;
    }
}

// Настройки
$kinopoisk_xf = 'kinopoisk_id';

// Проверка существования поля kinopoisk_id в xfields.json
if (file_exists(ENGINE_DIR . '/data/xfields.json')) {
    $xfields_config = json_decode(file_get_contents(ENGINE_DIR . '/data/xfields.json'), true);
    if (json_last_error() === JSON_ERROR_NONE && isset($xfields_config['fields']) && !isset($xfields_config['fields'][$kinopoisk_xf])) {
        msg("error", "Ошибка модуля", "Поле 'kinopoisk_id' не найдено в конфигурации дополнительных полей.");
    }
}

// Обработка sequels для текущей новости
global $row;
$sequels_enabled = false;
$sequels_ids = '';
if (isset($row['xfields']) && !empty($row['xfields'])) {
    $xfieldsdata = xfieldsdataload($row['xfields']);
    if (isset($xfieldsdata['sequels']) && !empty($xfieldsdata['sequels'])) {
        $sequels_ids = $xfieldsdata['sequels'];
        $sequels_enabled = true;
    }
}

if ($sequels_enabled && !empty($sequels_ids)) {
    $sequels_array = explode(',', $sequels_ids);
    $temp_array = [];
    foreach ($sequels_array as $value) {
        $value = $db->safesql(trim($value));
        $temp_array[] = "(p.xfields LIKE '%{$kinopoisk_xf}|{$value}||%' OR p.xfields LIKE '%{$kinopoisk_xf}|{$value}')";
    }
    $where[] = "(" . implode(' OR ', $temp_array) . ")";
}
]]></replacecode>
			<enabled>1</enabled>
		</operation>
		<operation action="replace">
			<searchcode><![CDATA[$sql_select .= " WHERE ".implode(' AND ', $where)." ORDER BY " . $fixed . $news_sort . " " . $news_msort . " LIMIT " . $custom_from . "," . $custom_limit;]]></searchcode>
			<replacecode><![CDATA[if ($sequels_enabled) {
    $sql_select .= " WHERE ".implode(' AND ', $where)." ORDER BY SUBSTRING_INDEX(SUBSTRING_INDEX(p.xfields, 'year|', -1), '||', 1) ASC LIMIT " . $custom_from . "," . $custom_limit;
} else {
    $sql_select .= " WHERE ".implode(' AND ', $where)." ORDER BY " . $fixed . $news_sort . " " . $news_msort . " LIMIT " . $custom_from . "," . $custom_limit;

}]]></replacecode>
			<enabled>1</enabled>
		</operation>
	</file>
</dleplugin>
